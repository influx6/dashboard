module.exports = (function(utility,url,qs,debug,domain){

	var utility = utility,
		basic = {
			find : function(item){
					if(!this[item]) return false;
					return this[item];
			},
			set : function(item,value,force){
					if(this[item] && !force) return this[item];
					this[item] = value;
					return this[item];
			}
		},
		searchable = {
			find : function(item,success,failure){
				var count = 0, size = utility.keys(this).length - 1;
				if(!failure) failure = function(){};

				utility.eachAsync(this,function(e,i,o,fn){
					if(count === size) fn(true);
					count += 1;
					fn(false);
				},function(err){
					if(err) failure();
					console.log("find completed!");
				},this,function(e,i,o){
					var match = item.match(e.mount);
					if(utility.isObject(e) && match){ success(e,match); return true;}
					return false;
				});

			},

			set : function(item,value,force){
					if(this[item] && !force) return this[item];
					this[item] = value;
					return this[item];
			}
		},
		helpers = function(scope,ext){
			scope.find = function(){ return ext.find.apply(scope, arguments); };
			scope.set = function(){ return ext.set.apply(scope,arguments); };
			return true;
		};


		Router = function(server){

			var self = this;
			this.domain = domain.create();
			this.pipe = { server: server };
			this.routes = {};
			helpers(this.routes,basic);


			this.routes.set('/404',{ 
				mount:'/404',
				params: null,
				split: null,
				fn: function(req,res){
					res.writeHead(404,{ 'content-type': "text/plain",'x-powered-by':"router@0.1"});
					res.end("Page Not Found!");
					self.domain.dispose();
					Router.debug.custom(req,'page not found from');
				}
			});


			server.on('request',function(req,res){
				var data = [''];
				self.pipe.req = req;
				self.pipe.res = res;
				self.domain.add(req);
				self.domain.add(res); 

				// req.on('error',function(err){
				// 	debug.log("request error 505!",err);
				// 	try{
				// 		res.writeHead(505);
				// 		res.end("Request Error! 505!");
				// 		res.on('end',function(){	self.domain.dispose(); })
				// 	}catch(e){
				// 		debug.log("tryCatching 505 Error",e,req.url);
				// 		self.domain.dispose()
				// 	}
				// });

				// req.on('data',function(chunk){
				// 	data.push(chunk);
				// });

				// req.on('end',function(){
				// 	process.nextTick(function(){ self.process(req,res,data); });
				// })

				process.nextTick(function(){ self.process(req,res,data); });
			});
		};
		Router.debug = {
				default: function(req,msg,to){
					var path = url.parse(req.url),host = req.headers.host;
					return utility.makeString(" ","Info:".red,req.method.green,"Page".grey,path.pathname.green,msg.grey,host.magenta,"on".grey,(new Date()).toUTCString().yellow);
				},
				redirect: function(req,to){
					debug.log(this.default(req,"redirect to "+to.green+" from".grey));
				},
				custom: function(req,message,to){
					debug.log(this.default(req,message,to));
				}
		};
		Router.matchrs = {
			root: /^\/$/,
			basic: /\/([\w|\d|\-|\_]+)|\//,
			param: /^:([\w|\d|\-|\_]+)/,
			norm: /^([\w|\d|\-|\_]+)/,
			paramd:/\/(:[\w|\d|\-|\_]+)/,
			pure: /\/([\w|\d|\-|\_]+)/,
			// rootsplitter: /^\/([\w|\d|\-|\_]+)(\/)/,
			// rootextender: /^\/([\w|\d|\-|\_]+)(\/[:\w\W]+)/,
			rootextender: /(\/[\w|\d|\-|\_]+)(\/$|\/[\w\W]+)/
		};

		Router.methods = {
			"get":"_get_",
			"post":"_post_",
			"put":"_put_",
			"delete":"_delete_",
		};

		Router.fn = Router.prototype;

		Router.fn.processMount = function(mount){
				var temp = mount,
				unit = { params: null, split: null, mount:null, orig: mount },
				split,join=[], m = Router.matchrs,set = {};

				if(temp === '/'){ unit.mount = /^\/$/; return unit; }

				if(temp.charAt(0) === '/') temp = temp.substring(1);
				split = temp.split('/')

				if(!split.length) return false;

				utility.eachAsync(split,function(e,i,o,fn){
					if(e.match(m.norm)){
						// var tmp = utility.values(m.pure.toString());
						// tmp[0] = tmp[tmp.length - 1] = '';
						join.push('\\/'+e);
						set[e] = null;
					}
					else if(e.match(m.param)){ 
						var item = e.match(m.param),tmp = utility.values(m.pure.toString());
						tmp[0] = tmp[tmp.length - 1] = '';
						set[item[1]] = null;
						join.push(tmp.join(''));
					}
					if(e.charAt(e.length) === '/') join.push('/');
					fn(false);
				},function(err){
					if(err) return;
					unit.mount = new RegExp(("^".concat(join.join('')).concat('$')),'i');
					unit.params = set;
					unit.split = split;

				},this);

				return unit;
		};

		Router.fn.route = function(main,sets){
			var self = this,
			route = this.routes.set(main,{
				"_get_":{},
				"_post_":{},
				"_put_":{},
				"_delete_":{},
			});

			helpers(route,basic);
			helpers(route._get_,searchable);
			helpers(route._post_,searchable);
			helpers(route._put_,searchable);
			helpers(route._delete_,searchable);

			var handle = function(method,callbackwrapper){
				 return function(mount,callback){
					var list = this.find(method),processd;
					processd = self.processMount(mount);
					if(!callbackwrapper) processd.fn = callback;
					else processd.fn = callbackwrapper(callback);
					list.set(mount,processd);
				};
			};

			route.get = handle("_get_");
			route.put = handle("_put_");
			route.post = handle("_post_");
			route.delete = handle("_delete_");

			route.redirect = function(from,to,method){
				var id = self.processMount(from),
					key = to.match(Router.matchrs.rootextender),
					rt = self.routes.find(key[1])[Router.methods[method.toLowerCase()]][key[2]],
					entry = this[Router.methods[method.toLowerCase()]];

					id.fn = function(req){
						Router.debug.redirect(req,to);
						return rt.fn.apply(this,arguments);
					}
					entry.set(from,id);
					// real = matchrs.rootextender.test(to) ? to.match(matchrs.rootextender) : [to,final],
					// react = this.routes.find(real[0]);

					// if(final){
					// 	var scope = react[method];
					// 	scope.find(fr[1],function(e){
					// 		console.log("found:",e);
					// 	});
					// }else self.routes.set(from,react);

					// console.log(real,react);

					// if(!final){
					// 	self.routes.set(from,react);
					// }else{
					//  	// self.routes.set(from,react)
					// }

					// console.log(final,fr,real,scope,react);
					// if(!react) return false;
					// return this.routes.set(from,function(res,req){
					// 	var path = url.parse(req.url);
					// 	message.redirect(req,path,req.headers,to);
					// 	react(res,req);
					// });
			};

			//execute sets against the route
			sets.call(route);

			return route;
		};

		Router.fn.params = function(templ,keys,obj){
			var params = {};
			utility.eachAsync(templ,function(e,i,o){
			   var k = e.split(':'), c = keys[i];
			   if(k[1] && (k[1] in obj)) params[k[1]] = c;
			},null,this);
			return params;
		};

		Router.fn.process = function(req,res,body){
			req.res = res;
			res.req = req;

			var self = this,rootname,extra,root,requested,reqa,
				path = url.parse(req.url),
				failed = this.routes.find('/404'),
				method = Router.methods[req.method.toLowerCase()],
				epath = utility.eString(path.pathname);

				//minor corrections of url ending with ending slash
				if(epath.end() === '/'){ 
					var ep = epath.split('/'); ep.pop(); epath = ep.join('/');
				}

				rootname = epath.match(Router.matchrs.basic);
				// if(!rootname) return failed.fn(req,res);

				extra = epath.match(Router.matchrs.rootextender);
				root = this.routes.find( (utility.isArray(rootname) && rootname[0]) ? rootname[0] : '/')[method];
				requested = (extra ? extra[2] : '/');
				reqa = (requested.length > 1 ? requested.split('/') : requested);

				reqa = (utility.isArray(reqa) ? utility.splice(reqa,1,reqa.length) : reqa);

			if(!root) return failed.fn(req,res);

			root.find(requested,function(e,o){
				var param = {};
				param.url = self.params(e.split,reqa,e.params);
				param.body = qs.parse(body.join(''));
				res.params = param;
				Router.debug.custom(req,"made to");
				e.fn(req,res,param.body);
			},function(){
				failed.fn(req,res);
			});

			// searchable.find.call(root,'/',function(e,o,m){
			// 	console.log(e,o,m);
			// });

			// route._get_.find('/',function(e,i,o){
			// 	console.log(e,i,o,"routing");
			// });

			// root.find("/",function(err,e,match){
			// 	console.log("checking:",err,e,match);
			// 	if(err){
			// 		var fail = root.find('/404') || failed;
			// 		fail.fn(req,res);
			// 	}
			// 	//call the response object
			// 	console.log("we got it",match);
			// 	e.fn(req,res);
			// 	// cb(false)
			// });

		};

	return Router;

});